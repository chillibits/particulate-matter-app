/*
 * Copyright Â© Marc Auberer 2017 - 2021. All rights reserved
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"
    defaultConfig {
        applicationId "com.mrgames13.jimdo.feinstaubapp"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 3980
        versionName "4.0.0-alpha01"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            def mapsKey = System.getenv("PMAPP_MAPS_KEY")
            resValue "string", "maps_api_key", "\"$mapsKey\""
            def apiKey = System.getenv("PMAPP_API_KEY")
            resValue "string", "api_client_key", "\"$apiKey\""
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            def mapsKey = System.getenv("PMAPP_MAPS_KEY")
            resValue "string", "maps_api_key", "\"$mapsKey\""
            def apiKey = System.getenv("PMAPP_API_KEY")
            resValue "string", "api_client_key", "\"$apiKey\""
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    packagingOptions {
        exclude 'META-INF/**'
    }
    buildFeatures {
        dataBinding = true
    }
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // Base dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta01'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Room dependencies
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Maps dependencies
    implementation 'com.google.maps.android:maps-ktx:3.2.1'
    implementation 'com.google.maps.android:maps-utils-ktx:3.2.1'
    implementation 'com.google.android.libraries.places:places:2.6.0'

    // ZXing dependencies
    implementation 'com.google.zxing:core:3.4.1'

    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    // Ktor dependencies
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-auth-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"

    // SimpleSettings dependencies
    implementation 'com.chillibits:simplesettings:1.3.2'

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // External dependencies
    implementation 'com.fxn769:bubbletabbar:1.0.6'
    implementation 'com.miguelcatalan:materialsearchview:1.4.0'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.24'
    implementation 'com.github.dhaval2404:colorpicker:2.3'
    implementation 'com.github.rtchagas:pingplacepicker:2.5.0'
    implementation 'com.mikepenz:fastadapter:5.6.0'
    implementation 'eu.davidea:flipview:1.2.0'
    implementation 'com.github.javiersantos:MaterialStyledDialogs:3.0.2'
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.mikepenz:iconics-core:5.3.3'
    // Test at runtime before upgrading
    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.8-kotlin@aar' // Maybe breaks app (https://github.com/mikepenz/Android-Iconics/issues/524)
    implementation 'com.github.ibrahimsn98:live-preferences:1.9'
    implementation 'com.github.duanhong169:drawabletoolbox:1.0.7'
    implementation 'com.github.marcauberer:ProgressFloatingActionButton:1.1.0'

    // Debug dependencies
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
}

// Task for downloading all translation files
task downloadTranslations {
    group 'pre-build tasks'
    description 'Downloads all translation files.'

    ext.apiKey1 = '7qUo-LUKd4VIHSwRYB5005T7QQbaFCGw'
    ext.apiKey2 = 'mg24uL96-mSwhchnk4LnJAzeyBtOsYy3'
    ext.apiKeyErrorMessages = 'eRRfdqc5BoxMAdvyqAljTjEh1O0x35wO'

    // English
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values/strings.xml")
        new URL("https://localise.biz/api/export/locale/en.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
        // Error messages string file
        f = new File("${project.projectDir}/src/main/res/values/error-messages.xml")
        new URL("https://localise.biz/api/export/locale/en.xml?format=android&key=${apiKeyErrorMessages}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Bulgarian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-bg/strings.xml")
        new URL("https://localise.biz/api/export/locale/bg.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Dutch
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-nl/strings.xml")
        new URL("https://localise.biz/api/export/locale/nl.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // French
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-fr/strings.xml")
        new URL("https://localise.biz/api/export/locale/fr.xml?format=android&key=${apiKey2}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Italian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-it/strings.xml")
        new URL("https://localise.biz/api/export/locale/it.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Polish
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-pl/strings.xml")
        new URL("https://localise.biz/api/export/locale/pl.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Romanian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-ro/strings.xml")
        new URL("https://localise.biz/api/export/locale/ro.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Russian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-ru/strings.xml")
        new URL("https://localise.biz/api/export/locale/ru.xml?format=android&key=${apiKey1}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // German
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-de/strings.xml")
        new URL("https://localise.biz/api/export/locale/de.xml?format=android&key=${apiKey2}").withInputStream { i -> f.withOutputStream { it << i }}
        // Error messages string file
        f = new File("${project.projectDir}/src/main/res/values-de/error-messages.xml")
        new URL("https://localise.biz/api/export/locale/de.xml?format=android&key=${apiKeyErrorMessages}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Spanish
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-es/strings.xml")
        new URL("https://localise.biz/api/export/locale/es.xml?format=android&key=${apiKey2}").withInputStream { i -> f.withOutputStream { it << i }}
    }
    // Hungarian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-hu/strings.xml")
        new URL("https://localise.biz/api/export/locale/hu.xml?format=android&key=${apiKey2}").withInputStream { i -> f.withOutputStream { it << i }}
    }
}

preBuild.dependsOn downloadTranslations
